# IMS Code Explained: Building Smart Inventory for Vigyan Ashram's DIY LAB

## How Our Lab System Works

At Vigyan Ashram's DIY LAB, I created several Python files that work together like a team to manage our lab inventory. Each file has a specific job in helping us keep track of tools, components, and materials. Let me explain what each file does in simple terms, just like I would explain to a fellow lab member.

## Main System Files for Our DIY LAB

### 1. capture_images.py - Our Digital Photographer

This file helps us take pictures of lab items for training the AI to recognize them.

```python
import cv2
import os

class ImageCapture:
    def __init__(self):
        self.cap = cv2.VideoCapture(0)  # Turn on camera
        
    def capture_images(self, item_name):
        """Take photos of lab items for training"""
        while True:
            ret, frame = self.cap.read()
            cv2.imshow('Press SPACE to take photo, Q to quit', frame)
            
            key = cv2.waitKey(1) & 0xFF
            if key == ord(' '):  # Space bar = take photo
                self.save_image(frame, item_name)
            elif key == ord('q'):  # Q = quit
                break
```

**What it does in our lab:**
- Shows live camera view of lab items
- Takes photos when you press spacebar
- Saves photos in organized folders by item type
- Checks if photos are clear enough for training
- Helps us build a digital catalog of all our lab equipment

### 2. train.py - Our AI Teacher for Lab Items

This file teaches the computer to recognize different tools and components in our DIY LAB.

```python
import tensorflow as tf
from tensorflow.keras.applications import MobileNetV2

class ModelTrainer:
    def __init__(self, num_classes):
        self.num_classes = num_classes
        
    def build_model(self):
        """Create the AI brain for our lab"""
        # Use a pre-trained model as starting point
        base_model = MobileNetV2(input_shape=(224, 224, 3), weights='imagenet')
        base_model.trainable = False
        
        # Add our custom layers for lab items
        self.model = tf.keras.Sequential([
            base_model,
            tf.keras.layers.GlobalAveragePooling2D(),
            tf.keras.layers.Dense(128, activation='relu'),
            tf.keras.layers.Dense(self.num_classes, activation='softmax')
        ])
        
    def train_model(self, training_data):
        """Teach the AI using our lab photos"""
        self.model.compile(optimizer='adam', loss='categorical_crossentropy')
        history = self.model.fit(training_data, epochs=50)
        return history
```

**What it does in our lab:**
- Creates an AI "brain" that learns about our specific lab items
- Uses photos we took to teach it about resistors, screwdrivers, Arduino boards, etc.
- Takes 30-60 minutes to learn all our lab equipment
- Saves the trained model so we can use it later
- Works well with the variety of components we use in our projects

### 3. excel_model.py - Our Live Lab Monitor

This file watches through the camera and recognizes lab items in real-time, perfect for tracking what students are using.

```python
import cv2
import tensorflow as tf
import pandas as pd
from datetime import datetime

class RealTimeDetector:
    def __init__(self, model_path):
        self.model = tf.keras.models.load_model(model_path)
        self.confidence_threshold = 0.7  # How sure it needs to be
        
    def detect_objects(self):
        """Watch for lab items and log their usage"""
        cap = cv2.VideoCapture(0)
        detections = []
        
        while True:
            ret, frame = cap.read()
            
            # Ask AI what lab item it sees
            prediction = self.model.predict(frame)
            confidence = max(prediction[0])
            
            if confidence > self.confidence_threshold:  
                item_name = self.get_item_name(prediction)
                timestamp = datetime.now()
                
                # Remember what we saw in the lab
                detections.append({
                    'time': timestamp,
                    'item': item_name,
                    'confidence': confidence
                })
                
                # Show on screen what's detected
                cv2.putText(frame, f"{item_name}: {confidence:.2f}", 
                           (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
            
            cv2.imshow('Lab Item Detection', frame)
            
            # Save to Excel every 10 detections
            if len(detections) % 10 == 0:
                self.save_to_excel(detections)
```

**What it does in our lab:**
- Watches the live camera feed in our lab workspace
- Recognizes tools and components as students use them
- Only records when it's confident (70%+ sure) about what it sees
- Automatically saves data to Excel files for lab management
- Helps track which items are being used most often in projects

### 4. compress_images.py - Our Photo Optimizer for Lab Images

This file makes our lab photos better for training the AI system.

```python
from PIL import Image, ImageEnhance

class ImageOptimizer:
    def optimize_image(self, input_path, output_path):
        """Make lab photos better for AI training"""
        with Image.open(input_path) as img:
            # Resize to standard size
            img = img.resize((224, 224))
            
            # Make image sharper (helps with small components)
            sharpener = ImageEnhance.Sharpness(img)
            img = sharpener.enhance(1.2)
            
            # Improve contrast (better for identifying items)
            contrast = ImageEnhance.Contrast(img)
            img = contrast.enhance(1.1)
            
            # Save optimized version
            img.save(output_path, quality=85)
```

**What it does in our lab:**
- Resizes photos of lab equipment to the right size
- Makes them sharper and clearer (important for small electronic components)
- Reduces file sizes so they don't take up too much storage
- Processes whole folders of lab photos at once
- Ensures consistent quality across all our training images

### 5. gui_main.py - Our Lab Control Panel

This is the main window that lets anyone in the lab control the entire system easily.

```python
import tkinter as tk
from tkinter import ttk
import threading

class IMSInterface:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("DIY LAB Inventory Control Panel")
        
    def setup_ui(self):
        """Create buttons and controls for lab use"""
        # Main buttons for lab operations
        ttk.Button(self.root, text="Take Photos of Lab Items", 
                  command=self.start_capture).pack()
        ttk.Button(self.root, text="Train AI on Lab Equipment", 
                  command=self.start_training).pack()
        ttk.Button(self.root, text="Start Lab Monitoring", 
                  command=self.start_detection).pack()
        
        # Progress bar for training
        self.progress = ttk.Progressbar(self.root)
        self.progress.pack()
        
    def start_training(self):
        """Train the AI in background so lab work can continue"""
        def train():
            # Import training code and run it
            from train import ModelTrainer
            trainer = ModelTrainer()
            trainer.train_model()
            
        # Run training without stopping lab activities
        threading.Thread(target=train).start()
```

**What it does in our lab:**
- Provides easy-to-use buttons for any lab member
- Shows progress during AI training sessions
- Runs tasks in background so students can keep working on projects
- Gives status updates about system operation
- Makes complex AI technology accessible to everyone in the lab

### 6. setup.py - Our Lab System Installer

This file installs everything needed to run the inventory system in our DIY LAB.

```python
import subprocess
import sys

class SystemSetup:
    def __init__(self):
        self.packages = [
            'tensorflow',    # AI library for recognition
            'opencv-python', # Camera library for lab monitoring
            'pandas',        # Excel library for data organization
            'pillow'         # Image library for photo processing
        ]
        
    def install_everything(self):
        """Install all required software for the lab"""
        for package in self.packages:
            subprocess.run([sys.executable, '-m', 'pip', 'install', package])
            print(f"Installed {package} for lab use")
            
    def create_folders(self):
        """Make folders for organizing lab data"""
        import os
        folders = ['lab_training_data', 'lab_models', 'lab_logs']
        for folder in folders:
            os.makedirs(folder, exist_ok=True)
```

**What it does in our lab:**
- Installs all needed software libraries on lab computers
- Creates folders for organizing our lab inventory data
- Checks if lab cameras work properly
- Sets up the environment for our specific lab needs

## How Everything Works Together in Our DIY LAB

Think of our system like a well-organized workshop where everything has its place:

1. **Setup (setup.py)**: Prepares lab computers with all the necessary tools
2. **Photo Collection (capture_images.py)**: Gathers images of our lab equipment and components
3. **Photo Improvement (compress_images.py)**: Makes photos ready for AI learning
4. **AI Training (train.py)**: Teaches the computer to recognize our specific lab items
5. **Live Monitoring (excel_model.py)**: Uses the trained AI to watch lab activities and track usage
6. **Control Panel (gui_main.py)**: Lets any lab member easily control the entire system

## Key Programming Ideas for Lab Members

### Classes and Objects - Like Lab Organization
Each file uses "classes" - think of them as organizing systems for different types of lab work. Like having separate storage systems for electronics, mechanical parts, and tools.

### Threading - Like Multitasking in the Lab
Some tasks (like AI training) take time. Threading lets the computer do these tasks in the background while students continue their project work - just like how we can have multiple projects running simultaneously in different areas of the lab.

### Error Handling - Like Lab Safety Protocols
The system is designed to keep working even when something goes wrong - like if a camera gets disconnected during a project session or if lighting conditions change throughout the day.

## Why This Design Works for Our Lab

- **Student-Friendly**: Each part has one clear job that's easy to understand
- **Project-Focused**: If one part needs fixing, students can continue working on other projects
- **Expandable**: Easy to add new types of components as our lab grows
- **Reliable**: Built-in safety features prevent system crashes during important project work
- **Educational**: Students learn about AI while solving a real lab problem

## Real Lab Applications We've Seen

### Electronics Project Area:
- Tracking Arduino boards, sensors, and breadboards during project sessions
- Monitoring when students check out multimeters and oscilloscopes
- Managing resistor and capacitor supplies for circuit building

### Mechanical Workshop:
- Keeping track of 3D printer filament usage
- Monitoring tool checkout for project builds
- Managing raw materials like metal sheets and plastic parts

### Project Storage:
- Tracking project boxes and their contents
- Managing shared components between different student teams
- Monitoring prototype storage and retrieval

The whole system is designed around making our DIY LAB more efficient so students can spend more time learning, building, and creating rather than searching for parts and tools.
